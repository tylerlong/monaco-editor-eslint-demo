import { ESLint, Linter } from 'eslint';
import { parseForESLint } from '@typescript-eslint/parser';
import eslintPlugin from '@typescript-eslint/eslint-plugin';
import nodePlugin from 'eslint-plugin-node';
import eqeqeqFixPlugin from 'eslint-plugin-eqeqeq-fix';
import prettierPlugin from 'eslint-plugin-prettier';

const eslint = new ESLint();
const linter = new Linter();

const config = {
  env: {},
  globals: {
    ArrayBuffer: 'readonly',
    Atomics: 'readonly',
    BigInt: 'readonly',
    BigInt64Array: 'readonly',
    BigUint64Array: 'readonly',
    DataView: 'readonly',
    Float32Array: 'readonly',
    Float64Array: 'readonly',
    Int16Array: 'readonly',
    Int32Array: 'readonly',
    Int8Array: 'readonly',
    Map: 'readonly',
    Promise: 'readonly',
    Proxy: 'readonly',
    Reflect: 'readonly',
    Set: 'readonly',
    SharedArrayBuffer: 'readonly',
    Symbol: 'readonly',
    Uint16Array: 'readonly',
    Uint32Array: 'readonly',
    Uint8Array: 'readonly',
    Uint8ClampedArray: 'readonly',
    WeakMap: 'readonly',
    WeakSet: 'readonly',
    globalThis: 'readonly',
    Intl: 'readonly',
    TextDecoder: 'readonly',
    TextEncoder: 'readonly',
    URL: 'readonly',
    URLSearchParams: 'readonly',
    WebAssembly: 'readonly',
    clearInterval: 'readonly',
    clearTimeout: 'readonly',
    console: 'readonly',
    queueMicrotask: 'readonly',
    setInterval: 'readonly',
    setTimeout: 'readonly',
    Buffer: 'readonly',
    GLOBAL: 'readonly',
    clearImmediate: 'readonly',
    global: 'readonly',
    process: 'readonly',
    root: 'readonly',
    setImmediate: 'readonly',
    __dirname: 'readonly',
    __filename: 'readonly',
    exports: 'writable',
    module: 'readonly',
    require: 'readonly',
  },
  parser:
    '/Users/tyler.liu/src/ts/monaco-editor-eslint-demo/node_modules/@typescript-eslint/parser/dist/index.js',
  parserOptions: {
    ecmaFeatures: {
      globalReturn: true,
    },
    ecmaVersion: 2019,
    sourceType: 'script',
  },
  plugins: ['node', 'eqeqeq-fix', 'prettier', '@typescript-eslint'],
  rules: {
    'prettier/prettier': ['warn'],
    quotes: [
      'warn',
      'single',
      {
        avoidEscape: true,
      },
    ],
    eqeqeq: ['off'],
    'eqeqeq-fix/eqeqeq': ['warn'],
    'no-process-exit': ['error'],
    'node/no-deprecated-api': ['error'],
    'node/no-extraneous-import': ['error'],
    'node/no-extraneous-require': ['error'],
    'node/no-exports-assign': ['error'],
    'node/no-missing-import': ['error'],
    'node/no-missing-require': ['error'],
    'node/no-unpublished-bin': ['error'],
    'node/no-unpublished-import': ['error'],
    'node/no-unpublished-require': ['error'],
    'node/no-unsupported-features/es-builtins': ['error'],
    'node/no-unsupported-features/es-syntax': [
      'error',
      {
        ignores: [],
      },
    ],
    'node/no-unsupported-features/node-builtins': ['error'],
    'node/process-exit-as-throw': ['error'],
    'node/shebang': ['error'],
    curly: [0],
    'lines-around-comment': [0],
    'max-len': [0],
    'no-confusing-arrow': [0],
    'no-mixed-operators': [0],
    'no-tabs': [0],
    'no-unexpected-multiline': [0],
    '@typescript-eslint/quotes': [0],
    'babel/quotes': [0],
    'vue/html-self-closing': [0],
    'vue/max-len': [0],
    'array-bracket-newline': ['off'],
    'array-bracket-spacing': ['off'],
    'array-element-newline': ['off'],
    'arrow-parens': ['off'],
    'arrow-spacing': ['off'],
    'block-spacing': ['off'],
    'brace-style': ['off'],
    'comma-dangle': ['off'],
    'comma-spacing': ['off'],
    'comma-style': ['off'],
    'computed-property-spacing': ['off'],
    'dot-location': ['off'],
    'eol-last': ['off'],
    'func-call-spacing': ['off'],
    'function-call-argument-newline': ['off'],
    'function-paren-newline': ['off'],
    'generator-star': ['off'],
    'generator-star-spacing': ['off'],
    'implicit-arrow-linebreak': ['off'],
    indent: ['off'],
    'jsx-quotes': ['off'],
    'key-spacing': ['off'],
    'keyword-spacing': ['off'],
    'linebreak-style': ['off'],
    'multiline-ternary': ['off'],
    'newline-per-chained-call': ['off'],
    'new-parens': ['off'],
    'no-arrow-condition': ['off'],
    'no-comma-dangle': ['off'],
    'no-extra-parens': ['off'],
    'no-extra-semi': ['off'],
    'no-floating-decimal': ['off'],
    'no-mixed-spaces-and-tabs': ['off'],
    'no-multi-spaces': ['off'],
    'no-multiple-empty-lines': ['off'],
    'no-reserved-keys': ['off'],
    'no-space-before-semi': ['off'],
    'no-trailing-spaces': ['off'],
    'no-whitespace-before-property': ['off'],
    'no-wrap-func': ['off'],
    'nonblock-statement-body-position': ['off'],
    'object-curly-newline': ['off'],
    'object-curly-spacing': ['off'],
    'object-property-newline': ['off'],
    'one-var-declaration-per-line': ['off'],
    'operator-linebreak': ['off'],
    'padded-blocks': ['off'],
    'quote-props': ['off'],
    'rest-spread-spacing': ['off'],
    semi: ['off'],
    'semi-spacing': ['off'],
    'semi-style': ['off'],
    'space-after-function-name': ['off'],
    'space-after-keywords': ['off'],
    'space-before-blocks': ['off'],
    'space-before-function-paren': ['off'],
    'space-before-function-parentheses': ['off'],
    'space-before-keywords': ['off'],
    'space-in-brackets': ['off'],
    'space-in-parens': ['off'],
    'space-infix-ops': ['off'],
    'space-return-throw-case': ['off'],
    'space-unary-ops': ['off'],
    'space-unary-word-ops': ['off'],
    'switch-colon-spacing': ['off'],
    'template-curly-spacing': ['off'],
    'template-tag-spacing': ['off'],
    'unicode-bom': ['off'],
    'wrap-iife': ['off'],
    'wrap-regex': ['off'],
    'yield-star-spacing': ['off'],
    '@babel/object-curly-spacing': ['off'],
    '@babel/semi': ['off'],
    '@typescript-eslint/brace-style': ['off'],
    '@typescript-eslint/comma-dangle': ['off'],
    '@typescript-eslint/comma-spacing': ['off'],
    '@typescript-eslint/func-call-spacing': ['off'],
    '@typescript-eslint/indent': ['off'],
    '@typescript-eslint/keyword-spacing': ['off'],
    '@typescript-eslint/member-delimiter-style': ['off'],
    '@typescript-eslint/no-extra-parens': ['off'],
    '@typescript-eslint/no-extra-semi': ['off'],
    '@typescript-eslint/object-curly-spacing': ['off'],
    '@typescript-eslint/semi': ['off'],
    '@typescript-eslint/space-before-blocks': ['off'],
    '@typescript-eslint/space-before-function-paren': ['off'],
    '@typescript-eslint/space-infix-ops': ['off'],
    '@typescript-eslint/type-annotation-spacing': ['off'],
    'babel/object-curly-spacing': ['off'],
    'babel/semi': ['off'],
    'flowtype/boolean-style': ['off'],
    'flowtype/delimiter-dangle': ['off'],
    'flowtype/generic-spacing': ['off'],
    'flowtype/object-type-curly-spacing': ['off'],
    'flowtype/object-type-delimiter': ['off'],
    'flowtype/quotes': ['off'],
    'flowtype/semi': ['off'],
    'flowtype/space-after-type-colon': ['off'],
    'flowtype/space-before-generic-bracket': ['off'],
    'flowtype/space-before-type-colon': ['off'],
    'flowtype/union-intersection-spacing': ['off'],
    'react/jsx-child-element-spacing': ['off'],
    'react/jsx-closing-bracket-location': ['off'],
    'react/jsx-closing-tag-location': ['off'],
    'react/jsx-curly-newline': ['off'],
    'react/jsx-curly-spacing': ['off'],
    'react/jsx-equals-spacing': ['off'],
    'react/jsx-first-prop-new-line': ['off'],
    'react/jsx-indent': ['off'],
    'react/jsx-indent-props': ['off'],
    'react/jsx-max-props-per-line': ['off'],
    'react/jsx-newline': ['off'],
    'react/jsx-one-expression-per-line': ['off'],
    'react/jsx-props-no-multi-spaces': ['off'],
    'react/jsx-tag-spacing': ['off'],
    'react/jsx-wrap-multilines': ['off'],
    'standard/array-bracket-even-spacing': ['off'],
    'standard/computed-property-even-spacing': ['off'],
    'standard/object-curly-even-spacing': ['off'],
    'unicorn/empty-brace-spaces': ['off'],
    'unicorn/no-nested-ternary': ['off'],
    'unicorn/number-literal-case': ['off'],
    'vue/array-bracket-newline': ['off'],
    'vue/array-bracket-spacing': ['off'],
    'vue/arrow-spacing': ['off'],
    'vue/block-spacing': ['off'],
    'vue/block-tag-newline': ['off'],
    'vue/brace-style': ['off'],
    'vue/comma-dangle': ['off'],
    'vue/comma-spacing': ['off'],
    'vue/comma-style': ['off'],
    'vue/dot-location': ['off'],
    'vue/func-call-spacing': ['off'],
    'vue/html-closing-bracket-newline': ['off'],
    'vue/html-closing-bracket-spacing': ['off'],
    'vue/html-end-tags': ['off'],
    'vue/html-indent': ['off'],
    'vue/html-quotes': ['off'],
    'vue/key-spacing': ['off'],
    'vue/keyword-spacing': ['off'],
    'vue/max-attributes-per-line': ['off'],
    'vue/multiline-html-element-content-newline': ['off'],
    'vue/mustache-interpolation-spacing': ['off'],
    'vue/no-extra-parens': ['off'],
    'vue/no-multi-spaces': ['off'],
    'vue/no-spaces-around-equal-signs-in-attribute': ['off'],
    'vue/object-curly-newline': ['off'],
    'vue/object-curly-spacing': ['off'],
    'vue/object-property-newline': ['off'],
    'vue/operator-linebreak': ['off'],
    'vue/quote-props': ['off'],
    'vue/script-indent': ['off'],
    'vue/singleline-html-element-content-newline': ['off'],
    'vue/space-in-parens': ['off'],
    'vue/space-infix-ops': ['off'],
    'vue/space-unary-ops': ['off'],
    'vue/template-curly-spacing': ['off'],
    'indent-legacy': ['off'],
    'no-spaced-func': ['off'],
    'react/jsx-space-before-closing': ['off'],
    '@typescript-eslint/adjacent-overload-signatures': ['error'],
    '@typescript-eslint/ban-ts-comment': ['error'],
    '@typescript-eslint/ban-types': ['error'],
    'no-array-constructor': ['off'],
    '@typescript-eslint/no-array-constructor': ['error'],
    'no-empty-function': ['off'],
    '@typescript-eslint/no-empty-function': ['error'],
    '@typescript-eslint/no-empty-interface': ['error'],
    '@typescript-eslint/no-explicit-any': ['warn'],
    '@typescript-eslint/no-extra-non-null-assertion': ['error'],
    '@typescript-eslint/no-inferrable-types': ['error'],
    'no-loss-of-precision': ['off'],
    '@typescript-eslint/no-loss-of-precision': ['error'],
    '@typescript-eslint/no-misused-new': ['error'],
    '@typescript-eslint/no-namespace': ['error'],
    '@typescript-eslint/no-non-null-asserted-optional-chain': ['error'],
    '@typescript-eslint/no-non-null-assertion': ['warn'],
    '@typescript-eslint/no-this-alias': ['error'],
    '@typescript-eslint/no-unnecessary-type-constraint': ['error'],
    'no-unused-vars': ['off'],
    '@typescript-eslint/no-unused-vars': ['warn'],
    '@typescript-eslint/no-var-requires': ['error'],
    '@typescript-eslint/prefer-as-const': ['error'],
    '@typescript-eslint/prefer-namespace-keyword': ['error'],
    '@typescript-eslint/triple-slash-reference': ['error'],
    'constructor-super': ['error'],
    'for-direction': ['error'],
    'getter-return': ['error'],
    'no-async-promise-executor': ['error'],
    'no-case-declarations': ['error'],
    'no-class-assign': ['error'],
    'no-compare-neg-zero': ['error'],
    'no-cond-assign': ['error'],
    'no-const-assign': ['error'],
    'no-constant-condition': ['error'],
    'no-control-regex': ['error'],
    'no-debugger': ['error'],
    'no-delete-var': ['error'],
    'no-dupe-args': ['error'],
    'no-dupe-class-members': ['error'],
    'no-dupe-else-if': ['error'],
    'no-dupe-keys': ['error'],
    'no-duplicate-case': ['error'],
    'no-empty': ['error'],
    'no-empty-character-class': ['error'],
    'no-empty-pattern': ['error'],
    'no-ex-assign': ['error'],
    'no-extra-boolean-cast': ['error'],
    'no-fallthrough': ['error'],
    'no-func-assign': ['error'],
    'no-global-assign': ['error'],
    'no-import-assign': ['error'],
    'no-inner-declarations': ['error'],
    'no-invalid-regexp': ['error'],
    'no-irregular-whitespace': ['error'],
    'no-misleading-character-class': ['error'],
    'no-new-symbol': ['error'],
    'no-nonoctal-decimal-escape': ['error'],
    'no-obj-calls': ['error'],
    'no-octal': ['error'],
    'no-prototype-builtins': ['error'],
    'no-redeclare': ['error'],
    'no-regex-spaces': ['error'],
    'no-self-assign': ['error'],
    'no-setter-return': ['error'],
    'no-shadow-restricted-names': ['error'],
    'no-sparse-arrays': ['error'],
    'no-this-before-super': ['error'],
    'no-undef': ['error'],
    'no-unreachable': ['error'],
    'no-unsafe-finally': ['error'],
    'no-unsafe-negation': ['error'],
    'no-unsafe-optional-chaining': ['error'],
    'no-unused-labels': ['error'],
    'no-useless-backreference': ['error'],
    'no-useless-catch': ['error'],
    'no-useless-escape': ['error'],
    'no-with': ['error'],
    'require-yield': ['error'],
    'use-isnan': ['error'],
    'valid-typeof': ['error'],
  },
  settings: {},
  ignorePatterns: ['build/'],
};

const main = async () => {
  // const config = await eslint.calculateConfigForFile(
  //   '/Users/tyler.liu/src/ts/monaco-editor-eslint-demo/.eslintrc.json'
  // );
  // console.log(JSON.stringify(config, null, 2));

  const temp: { [name: string]: any } = {};
  for (const key of Object.keys(eslintPlugin.rules)) {
    temp[`@typescript-eslint/${key}`] = eslintPlugin.rules[key];
  }
  for (const key of Object.keys(nodePlugin.rules)) {
    temp[`node/${key}`] = nodePlugin.rules[key];
  }
  for (const key of Object.keys(eqeqeqFixPlugin.rules)) {
    temp[`eqeqeq-fix/${key}`] = eqeqeqFixPlugin.rules[key];
  }
  for (const key of Object.keys(prettierPlugin.rules)) {
    temp[`prettier/${key}`] = prettierPlugin.rules[key];
  }
  linter.defineRules(temp);
  linter.defineParser('@typescript-eslint/parser', {
    parseForESLint: parseForESLint as any,
  });

  const result = linter.verify('var a = 1', {
    ...config,
    parser: '@typescript-eslint/parser',
  } as any);
  console.log(result);
};

main();
